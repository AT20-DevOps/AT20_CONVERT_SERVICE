
pipeline{
    agent any
    environment {
        DOCKER_PASS =  credentials('docker_pass')
        SONAR_TOKEN =  credentials('sonar_token')
    }
    stages{
        stage("Test"){
            agent { docker 'node:18-alpine3.16' }
            steps{
                sh 'apk add --no-cache curl unzip' // for downloading and extracting sonar-scanner
                sh 'curl -Lo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip'
                sh 'unzip sonar-scanner.zip && rm sonar-scanner.zip'
                sh 'npm install --save-dev ts-jest'
                sh 'npm install --save-dev @types/jest'
                sh 'npx jest'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/report/report.html', followSymlinks: false
                }
            }
        }
        stage ('CodeInspection') {
            steps {
                sh '~/.sonar/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner \
                    -Dsonar.organization=at20-czn \
                    -Dsonar.projectKey=at20-czn \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=https://sonarcloud.io'
            }
        }
        stage("Quality gate") {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality gate failure."
                        }
                    }
                }
            }
        }
        stage ('Package'){
            steps {
                sh 'docker build -t at20_convert_service .'
            }
        }
        stage ('Publish'){
            steps {
                sh 'docker login -u carolina01 -p ${DOCKER_PASS}'
                sh 'docker tag at20_convert_service carolina01/at20_convert_service'
                sh 'docker push carolina01/at20_convert_service'
            }
        }
    }
}