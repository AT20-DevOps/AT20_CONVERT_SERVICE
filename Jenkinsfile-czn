
pipeline{
    agent any
    environment {
        DOCKER_PASS =  credentials('docker_pass')
        SONAR_TOKEN =  credentials('sonar_token')
        TARGET_HOST = '192.168.56.61'
        GIT_COMMIT_HASH = sh (script:"git rev-parse --short HEAD", returnStdout: true).trim()
    }
    stages{
        stage("Test"){
            agent { docker 'node:18-alpine3.16' }
            steps{
                sh 'npm install --save-dev ts-jest'
                sh 'npm install --save-dev @types/jest'
                sh 'npx jest'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/report/report.html', followSymlinks: false
                }
            }
        }
        stage ('CodeInspection') {
            agent{
                docker 'sonarsource/sonar-scanner-cli'
            }
            steps {
                withSonarQubeEnv('sonar_scanner') {
                    sh 'sonar-scanner \
                        -Dsonar.organization=at20-converter \
                        -Dsonar.projectKey=at20-converter \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                }
            }
        }
        //stage("Quality gate") {
        //    steps {
        //        timeout(time: 5, unit: 'MINUTES') {
        //            script {
        //                def qg = waitForQualityGate()
        //                if (qg.status != 'OK') {
        //                    error "Pipeline aborted due to quality gate failure"
        //                }
        //            }
        //        }
        //    }
        //}
        stage ('Package'){
            steps {
                sh 'docker build -t at20_convert_service .'
            }
        }
        stage ('Publish'){
            steps {
                //sh 'export TAG=$(git log --pretty=format:'%h' -n 1)'
                sh 'docker login -u carolina01 -p ${DOCKER_PASS}'
                sh 'docker tag at20_convert_service carolina01/at20_convert_service:${GIT_COMMIT_HASH}'
                sh 'docker push carolina01/at20_convert_service:${GIT_COMMIT_HASH}'
            }
        }
        stage ('DeployToDev') {
            steps {
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && docker-compose -f docker-compose-czn.yaml up -d'
                sh 'echo command to run smoke test'
            }
        }
        stage('DeployToAuto'){
            steps {
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && DOCKER_HOST=ssh://$TARGET_HOST docker-compose -f docker-compose-czn.yaml up -d'
                sh 'echo command to run automation tests'
            }
        }
    }
    post{
        always {
            sh 'docker container prune -f'
            sh 'docker image prune -f --filter "dangling=true"'
            sh 'docker system prune -a -f'
        }
    }
}
