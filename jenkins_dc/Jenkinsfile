pipeline{
    agent any
    parameters{
        booleanParam(name: 'skip_stage', defaultValue: true, description: 'Set to true to skip stage')

    }
    environment {
        DOCKER_PASS = credentials('docker_pass')
        SONAR_TOKEN = credentials('sonar_token')
        TARGET_HOST = '192.168.0.173'
        GIT_COMMIT_HASH = sh (script: "git rev-parse --short HEAD", returnStdout: true)
    }
    stages {
        stage("Test"){
            agent { docker 'node:18-alpine3.16'}
            steps {
                sh 'npm install'
                sh 'npm i --save-dev @types/jest'
                sh 'npm run test'
            }
            post{
                always{
                    archiveArtifacts artifacts: 'test/report/report.html', followSymlinks: false
                }
            }
        }
        stage('CodeInspection'){
            when { expression { params.skip_stage != true } }
            agent{
                docker 'sonarsource/sonar-scanner-cli'
            }
            steps{
                withSonarQubeEnv('sonar_scanner'){
                    sh 'sonar-scanner \
                        -Dsonar.organization=at20-dc \
                        -Dsonar.projectKey=convert-service-dc \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io'
                }
            }
        }
        stage('Quality gate'){
            when { expression { params.skip_stage != true } }
            steps{
                timeout(time: 3, unit: 'MINUTES') {
                    script{
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Package'){
            steps{
                sh'docker build -t at20_convert_service .'
            }
        }
        stage('Publish'){
            steps{
                sh 'docker login -u daniish77 -p ${DOCKER_PASS}'
                sh 'docker tag at20_convert_service daniish77/at20_convert_service:${GIT_COMMIT_HASH}'
                sh 'docker push daniish77/at20_convert_service:${GIT_COMMIT_HASH}'
            }

        }
        stage('DeployToDev'){
            steps{
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && docker-compose -f docker-compose.dc.yaml up -d'
                sh 'echo command to run smoke test'
            }
        }
        stage('DeployToAuto') {
            when { expression { params.skip_stage != false } }
            steps {
                sh 'export TAG_VERSION=${GIT_COMMIT_HASH} && DOCKER_HOST=ssh://$TARGET_HOST docker-compose -f docker-compose.dc.yaml up -d'
                sh 'echo command to run automation tests'
            }
        }
    }
    post{
        always{
            sh 'docker image prune -a -f'
        }
        success {
        emailext body: 'The Convert service build was executed successfully',
                 subject: 'The results of the build for the "Converter service"',
                 to: 'daniish77@gmail.com',
                 attachLog: true
        }
        failure {
        emailext body: 'The Convert service build failed at stage: ${currentBuild.currentStage.name}\n\n',
                 subject: 'The results of the build for the "Converter service"',
                 to: 'daniish77@gmail.com',
                 attachLog: true
        }
    }

}